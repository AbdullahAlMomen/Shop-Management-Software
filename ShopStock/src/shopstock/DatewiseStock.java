/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shopstock;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class DatewiseStock extends javax.swing.JFrame {

    /**
     * Creates new form DatewiseStock
     */
    DatabaseConnection DbC = new DatabaseConnection();
    String User;
    int ID=0;
    int OpeningStock;
    int ClosingStock;
    int Purchase=0;
    int Sale=0;
    int Damage=0;
    public DatewiseStock(String a) {
        initComponents();
        User = a;
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        Date dateobj = new Date();
        jXDatePicker1.setDate(dateobj); 
        try {
            
       
            Statement st;     
            st = DbC.connection().createStatement();
            ResultSet r=st.executeQuery("select * from PRODUCT");
            while (r.next()) {  
                    //System.out.println(r.getString("ProductName"));
                    Product.addItem(r.getString("ProductName"));  
            }
            DbC.connection().close();
        }
        catch (SQLException ex) {
       
        }
    }
    DatewiseStock() {
        initComponents();
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        Date dateobj = new Date();
        jXDatePicker1.setDate(dateobj); 
        try {
            
       
            Statement st;     
            st = DbC.connection().createStatement();
            ResultSet r=st.executeQuery("select * from PRODUCT");
            while (r.next()) {  
                    //System.out.println(r.getString("ProductName"));
                    Product.addItem(r.getString("ProductName"));  
            }
            DbC.connection().close();
        }
        catch (SQLException ex) {
       
        }
    }
    
    public void show_table(){
        DefaultTableModel model=(DefaultTableModel)SaleTable.getModel();
        model.setRowCount(0);
        
        Object[] row = new Object[5];
       
            row[0]=OpeningStock;
            row[1]=Purchase;
            row[2]=Sale;
            row[3]=Damage;
            row[4]=OpeningStock+Purchase-Sale-Damage;
            model.addRow(row);
        SaleTable.setModel(model);
        model.fireTableDataChanged();
        //model.fireTableDataChanged();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SaleTable = new javax.swing.JTable();
        Product = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1200, 600));
        setMinimumSize(new java.awt.Dimension(1200, 600));
        setPreferredSize(new java.awt.Dimension(1200, 600));

        jXDatePicker1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePicker1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Date");

        SaleTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        SaleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Opening Stock", "Purchase", "Sale", "Damage", "Closing Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(SaleTable);

        Product.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Product");

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shopstock/back.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(Product, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(396, 396, 396))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(363, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)))
                .addGap(32, 32, 32)
                .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(149, 149, 149)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Product, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(70, 70, 70)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(256, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jXDatePicker1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePicker1ActionPerformed
        // TODO add your handling code here:
        Date oDate1 = jXDatePicker1.getDate();
        DateFormat oDateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
        String szDate1 = oDateFormat2.format(oDate1);
        
        
        
        int PurchaseSum=0;
        
        
        try{
            String sql2="SELECT * FROM PRODUCT WHERE ProductName='"+Product.getSelectedItem().toString()+"'";
            Statement st =DbC.connection().createStatement();

            ResultSet rs=st.executeQuery(sql2);
            if(rs.next()){
                ID = rs.getInt("ProductId");
            }
            DbC.connection().close();
        }
        catch(SQLException ex){
            
        }
        try{
           
            
            String sql3="SELECT SUM(PurchaseQuantity) AS TS FROM PURCHASE WHERE PurchaseDate < '"+szDate1+"' AND ProductId="+ID ;
            PreparedStatement st =DbC.connection().prepareStatement(sql3);

            ResultSet rs=st.executeQuery();
            if(rs.next()){
                PurchaseSum= rs.getInt("TS");
            }
            System.out.println(PurchaseSum);
            DbC.connection().close();
        }
        catch(SQLException ex){

        }
        int SaleSum=0;
        try{
            String sql3="SELECT SUM(SaleQuantity) AS TS FROM SALE WHERE SaleDate < '"+szDate1+"' AND ProductId="+ID ;
            PreparedStatement st =DbC.connection().prepareStatement(sql3);

            ResultSet rs=st.executeQuery();
                    if(rs.next()){
                    SaleSum= rs.getInt("TS");
                    }
                    System.out.println(SaleSum);
                    DbC.connection().close();
        }
        catch(SQLException ex){
            
        }
        int DamageSum=0;
        try{
            String sql3="SELECT SUM(DamageQuantity) AS TS FROM DAMAGE WHERE DamageDate < '"+szDate1+"' AND ProductId="+ID ;
            PreparedStatement st =DbC.connection().prepareStatement(sql3);

            ResultSet rs=st.executeQuery();
                    if(rs.next()){
                    DamageSum= rs.getInt("TS");
                    }
                    System.out.println(DamageSum);
                    DbC.connection().close();
        }
        catch(SQLException ex){
            
        }
        OpeningStock=PurchaseSum-SaleSum-DamageSum;
        int Purchase=0;
        
        try{
           
            
            String sql3="SELECT SUM(PurchaseQuantity) AS TS FROM PURCHASE WHERE PurchaseDate = '"+szDate1+"' AND ProductId="+ID ;
            PreparedStatement st =DbC.connection().prepareStatement(sql3);

            ResultSet rs=st.executeQuery();
            if(rs.next()){
                Purchase= rs.getInt("TS");
            }
            System.out.println(Purchase);
            DbC.connection().close();
        }
        catch(SQLException ex){

        }
        int Sale=0;
        try{
            String sql3="SELECT SUM(SaleQuantity) AS TS FROM SALE WHERE SaleDate = '"+szDate1+"' AND ProductId="+ID ;
            PreparedStatement st =DbC.connection().prepareStatement(sql3);

            ResultSet rs=st.executeQuery();
                    if(rs.next()){
                    Sale= rs.getInt("TS");
                    }
                    System.out.println(Sale);
                    DbC.connection().close();
        }
        catch(SQLException ex){
            
        }
        int Damage=0;
        try{
            String sql3="SELECT SUM(DamageQuantity) AS TS FROM DAMAGE WHERE DamageDate = '"+szDate1+"' AND ProductId="+ID ;
            PreparedStatement st =DbC.connection().prepareStatement(sql3);

            ResultSet rs=st.executeQuery();
                    if(rs.next()){
                    Damage= rs.getInt("TS");
                    }
                    System.out.println(Damage);
                    DbC.connection().close();
        }
        catch(SQLException ex){
            
        }
        DefaultTableModel model=(DefaultTableModel)SaleTable.getModel();
        model.setRowCount(0);
        
        Object[] row = new Object[5];
       
            row[0]=OpeningStock;
            row[1]=Purchase;
            row[2]=Sale;
            row[3]=Damage;
            row[4]=OpeningStock+Purchase-Sale-Damage;
            model.addRow(row);
        SaleTable.setModel(model);
        model.fireTableDataChanged();
    }//GEN-LAST:event_jXDatePicker1ActionPerformed

    private void ProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductActionPerformed
        // TODO add your handling code here:
        Date oDate1 = jXDatePicker1.getDate();
        DateFormat oDateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
        String szDate1 = oDateFormat2.format(oDate1);
        
        
        
        int PurchaseSum=0;
        
        
        try{
            String sql2="SELECT * FROM PRODUCT WHERE ProductName='"+Product.getSelectedItem().toString()+"'";
            Statement st =DbC.connection().createStatement();

            ResultSet rs=st.executeQuery(sql2);
            if(rs.next()){
                ID = rs.getInt("ProductId");
            }
            DbC.connection().close();
        }
        catch(SQLException ex){
            
        }
        try{
           
            
            String sql3="SELECT SUM(PurchaseQuantity) AS TS FROM PURCHASE WHERE PurchaseDate < '"+szDate1+"' AND ProductId="+ID ;
            PreparedStatement st =DbC.connection().prepareStatement(sql3);

            ResultSet rs=st.executeQuery();
            if(rs.next()){
                PurchaseSum= rs.getInt("TS");
            }
            System.out.println(PurchaseSum);
            DbC.connection().close();
        }
        catch(SQLException ex){

        }
        int SaleSum=0;
        try{
            String sql3="SELECT SUM(SaleQuantity) AS TS FROM SALE WHERE SaleDate < '"+szDate1+"' AND ProductId="+ID ;
            PreparedStatement st =DbC.connection().prepareStatement(sql3);

            ResultSet rs=st.executeQuery();
                    if(rs.next()){
                    SaleSum= rs.getInt("TS");
                    }
                    System.out.println(SaleSum);
                    DbC.connection().close();
        }
        catch(SQLException ex){
            
        }
        int DamageSum=0;
        try{
            String sql3="SELECT SUM(DamageQuantity) AS TS FROM DAMAGE WHERE DamageDate < '"+szDate1+"' AND ProductId="+ID ;
            PreparedStatement st =DbC.connection().prepareStatement(sql3);

            ResultSet rs=st.executeQuery();
                    if(rs.next()){
                    DamageSum= rs.getInt("TS");
                    }
                    System.out.println(DamageSum);
                    DbC.connection().close();
        }
        catch(SQLException ex){
            
        }
        OpeningStock=PurchaseSum-SaleSum-DamageSum;
        int Purchase=0;
        
        try{
           
            
            String sql3="SELECT SUM(PurchaseQuantity) AS TS FROM PURCHASE WHERE PurchaseDate = '"+szDate1+"' AND ProductId="+ID ;
            PreparedStatement st =DbC.connection().prepareStatement(sql3);

            ResultSet rs=st.executeQuery();
            if(rs.next()){
                Purchase= rs.getInt("TS");
            }
            System.out.println(Purchase);
            DbC.connection().close();
        }
        catch(SQLException ex){

        }
        int Sale=0;
        try{
            String sql3="SELECT SUM(SaleQuantity) AS TS FROM SALE WHERE SaleDate = '"+szDate1+"' AND ProductId="+ID ;
            PreparedStatement st =DbC.connection().prepareStatement(sql3);

            ResultSet rs=st.executeQuery();
                    if(rs.next()){
                    Sale= rs.getInt("TS");
                    }
                    System.out.println(Sale);
                    DbC.connection().close();
        }
        catch(SQLException ex){
            
        }
        int Damage=0;
        try{
            String sql3="SELECT SUM(DamageQuantity) AS TS FROM DAMAGE WHERE DamageDate = '"+szDate1+"' AND ProductId="+ID ;
            PreparedStatement st =DbC.connection().prepareStatement(sql3);

            ResultSet rs=st.executeQuery();
                    if(rs.next()){
                    Damage= rs.getInt("TS");
                    }
                    System.out.println(Damage);
                    DbC.connection().close();
        }
        catch(SQLException ex){
            
        }
        DefaultTableModel model=(DefaultTableModel)SaleTable.getModel();
        model.setRowCount(0);
        
        Object[] row = new Object[5];
       
            row[0]=OpeningStock;
            row[1]=Purchase;
            row[2]=Sale;
            row[3]=Damage;
            row[4]=OpeningStock+Purchase-Sale-Damage;
            model.addRow(row);
        SaleTable.setModel(model);
        model.fireTableDataChanged();
        //show_table();
    }//GEN-LAST:event_ProductActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(User.equals("ADMIN")){
            AdminWorkingWin ob= new AdminWorkingWin(User);
            this.setVisible(false);
            ob.setVisible(true);
        }
        else{
            WorkingWin ob= new WorkingWin(User);
            this.setVisible(false);
            ob.setVisible(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatewiseStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatewiseStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatewiseStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatewiseStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatewiseStock().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Product;
    private javax.swing.JTable SaleTable;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    // End of variables declaration//GEN-END:variables
}
